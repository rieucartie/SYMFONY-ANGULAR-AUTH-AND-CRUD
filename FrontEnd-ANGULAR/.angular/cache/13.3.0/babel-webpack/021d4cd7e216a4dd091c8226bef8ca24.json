{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; // ADRESSE URL\n\nconst USERS_API = environment.USERS_API;\nconst AUTH_API = environment.AUTH_API;\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage;\n      this.authState = new Subject();\n    }\n\n    register(account) {\n      return this.http.post(USERS_API, account);\n    }\n\n    authenticate(credentials) {\n      return this.http.post(AUTH_API, credentials).pipe(map(resultat => {\n        this.storage.setItem('token', resultat.token);\n        this.authState.next(true);\n        return resultat;\n      }));\n    }\n    /**\r\n     * Permet de déconnecter l'utilisateur\r\n     */\n\n\n    logout() {\n      this.storage.removeItem('token');\n      this.authState.next(false);\n    }\n\n    getToken() {\n      return this.storage.getItem('token') || null;\n    }\n\n    isAuthenticated() {\n      return this.getToken() !== null;\n    }\n\n    getUserData() {\n      if (!this.getToken()) {\n        return null;\n      }\n\n      return jwtDecode(this.getToken());\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(Storage));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}